Class EmptyMagBase : Actor
{
	override void BeginPlay(void)
	{
		ChangeStatNum(STAT_PB_BULLETS);
		NashGoreStatics.QueueCasings();
		Super.BeginPlay();
		//This should be queueing it into Nashgores debris system i think?
	}
	
	Default
	{
	   Height 2;
	   Radius 2;
	   Speed 8;
	   +DOOMBOUNCE;
	   -NOGRAVITY;
	   +WINDTHRUST;
	   //+CLIENTSIDEONLY; //[Pop] Does this even matter? investigate later [AD] No, it does not xdd
	   +MOVEWITHSECTOR;
	   +MISSILE;
	   +NOBLOCKMAP;
	   -DROPOFF;
	   +NOTELEPORT;
	   +FORCEXYBILLBOARD; //[Pop] hmm, maybe, maybe not, we will see
	   +GHOST;
	   +ROLLSPRITE
	   +ROLLCENTER;
	   
	   Scale 1.0;
	   BounceCount 4;
	   //[Pop] These two values here are the only ones that should be changed in
	   //like 99% of cases, if you need to do 
	   
	   Mass 15; //[Pop] setting higher than 10, cause somethin with terrain splashes?
	   
	   SeeSound "weapons/emptymag/dropM"; //[Pop] also weapons/emptymag/dropL and weapons/emptymag/dropS respectively
	   DeathSound "weapons/emptymag/dropM"; //[Pop] use this one too, A_ActiveSound is used in the death state to play it manually cause for some reason it doesnt
	}

	double spinSpeed;

	override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		spinSpeed = 1.0;
	}

	override int SpecialBounceHit(Actor bounceMobj, Line bounceLine, readonly<SecPlane> bouncePlane)
	{		
		if(bouncePlane)
		{
			roll = 90;
			vel.z *= 0.8;
		}
			
		if(bounceLine)
			roll = 0;
			
		roll += frandom(-4.2, 4.2);
		spinSpeed *= frandom(-0.20, 0.20);
		
		return Super.SpecialBounceHit(bounceMobj, bounceLine, bouncePlane);
	}

	States
	{
		Spawn:
			ECLI A 1;
			Goto Spawn1;
		Spawn1:
			#### A 2 A_SetRoll(roll+(24*spinSpeed), SPF_INTERPOLATE); //[Pop] Use 24 for mid, 36 for small, and 12 for big
			Loop;
		Death:
			#### G 0; //[Pop] Preload Sprites
			#### A 0 A_SetRoll(0);
			#### A 900
			{
				//[Pop] Basically, make sure the frame set on this tic is the last frame
				//before the resting frames, then count how many rest frames for the random
				//frame additive, and then sprite flip is done automatically.
				frame = frame + (random(1,1));
				bSpriteFlip = random(0,1);
			}
			#### # -1;
			Stop;
		Splash:
			#### # -1;
			Stop;
	}
}	

Class SGL_Drum : EmptyMagBase //See?  Very minimal code to do the same thing.
{
	Default
	{
		Scale 0.33;
		BounceCount 3;
		SeeSound "weapons/emptymag/dropL";
		DeathSound "weapons/emptymag/dropL";
	}
	
	States
	{		
		Spawn:
			SGD1 A 1;
			Goto Spawn1;
		Spawn1:
			#### ABCDEFGHIJKL 2 A_SetRoll(roll+(12*spinSpeed), SPF_INTERPOLATE); 
			Loop;
		Death:
			#### MNOPQR 0; //Preload Sprites
			#### A 0 A_SetRoll(0);
			#### L 900
			{
				frame = frame + (random(1,6));
				bSpriteFlip = random(0,1);
			}
			#### # -1;
			Stop;
		Splash:
			#### # -1;
			Stop;
	}
}

Class SGL_StickyDrum : SGL_Drum
{
	States
	{
		Spawn:
			SGD2 A 1;
			Goto Spawn1;
	}
}

Class SGL_IncendiaryDrum : SGL_Drum
{
	States
	{
		Spawn:
			SGD3 A 1;
			Goto Spawn1;
	}
}

Class SGL_CryoDrum : SGL_Drum
{
	States
	{
		Spawn:
			SGD4 A 1;
			Goto Spawn1;
	}
}

Class SGL_AcidDrum : SGL_Drum
{
	States
	{
		Spawn:
			SGD5 A 1;
			Goto Spawn1;
	}
}

Class EmptyRLMagazine : EmptyMagBase
{
	Default
	{
		Scale 0.28;
		BounceCount 3;
		SeeSound "weapons/emptymag/dropL";
		DeathSound "weapons/emptymag/dropL";
	}
	
	States
	{
		Spawn:
			RCS3 A 1;
			Goto Spawn1;
		Spawn1:
			#### ABCDEFGH 2 A_SetRoll(roll+12*spinSpeed, SPF_INTERPOLATE); 
			Loop;
		Death:
			#### KL 0; //Preload Sprites
			#### A 0 A_SetRoll(0);
			#### J 900
			{
				frame = frame + (random(1,2));
				bSpriteFlip = random(0,1);
			}
			#### # -1;
			Stop;
		Splash:
			#### # -1;
			Stop;
	}
}

Class FlamerEmptyPB_Fuel : EmptyMagBase
{
	Default
	{
		Scale 0.38;
		BounceFactor 0.4;
		BounceCount 2;
		SeeSound "weapons/flamethrower/misc1";
	}

	bool smoking;
	
	States
	{
		Spawn:
			FMLA A 0;
		SpawnJump:
			"####" A 0 A_Jump(16, "SpawnSmoking");
			"####" A 0 A_Jump(256,"Spawn1","Spawn2","Spawn3");
		Spawn1:
			"####" ABCDEFGHIJABCDEFGHIJABCDEFGHIJABCDEFGHIJABCDEFGHIJABCDEFGHIJ  1 {
				A_SetRoll(roll+16);
			}
			Goto Death;
		Spawn2:
			"####" BCDEFGHIJABCDEFGHIJABCDEFGHIJABCDEFGHIJABCDEFGHABCDEFGHIJA  1 {
				A_SetRoll(roll+32);
			}
			Goto Death;
		Spawn3:
			"####" CDEFGHIJABCDEFGHIJABCDEFGHIJABCDEFGHIJABCDEFGHIJABCDEFGHIJAB  1 {
				A_SetRoll(roll+72);
			}
			Goto Death;
		SpawnSmoking:
			"####" A 0 { smoking = 1;}
			"####" ABCDEFGHIJABCDEFGHIJABCDEFGHIJABCDEFGHIJABCDEFGHIJABCDEFGHIJ 1 {
				A_SpawnItemEx("CasingSmoke",frandom(0.3,0.2),random(0,-1.0),0,0,0,frandom(0.5,0.1),0,0,0);
				A_SetRoll(roll+75);
			}
		Goto Death;
		
		Death:
			  FMLA K 0 A_SetRoll(0);
		Rest:
				FMLA K 0 A_JumpIf(smoking == 1, "Rest2");
				FMLA K 0;
				"####" "###########################################" 1;
				"####" "#" -1;
				Stop;
		Rest2:
				"####" "###########################################" 1 A_SpawnItemEx("CasingSmoke",frandom(0.3,0.2),random(0,-1.0),0,0,0,frandom(0.5,0.1),0,0,0);
				"####" "#" -1;
		Stop;		
	}
}

Class RevolverSpeedLoader : EmptyMagBase
{
	Default
	{  	
		Scale 0.20;
		BounceCount 5;
		SeeSound "weapons/emptymag/dropS";
		DeathSound "weapons/emptymag/dropS";
	}
	
	States
	{
		Spawn:
			RVS1 A 1;
			Goto Spawn1;
		Spawn1:
			#### ABCDEFGH 2 A_SetRoll(roll+36*spinSpeed, SPF_INTERPOLATE); 
			Loop;
		Death:
			#### IJ 0; //Preload Sprites
			#### A 0 A_SetRoll(0);
			#### H 900
			{
				frame = frame + (random(1,2));
				bSpriteFlip = random(0,1);
			}
			#### # -1;
			Stop;
		Splash:
			#### # -1;
			Stop;
	}
}

Class EmptyClipMP40 : Actor
{
		override void BeginPlay(void)
	{
		ChangeStatNum(STAT_PB_BULLETS);
		NashGoreStatics.QueueCasings();
		Super.BeginPlay();
	}
   Default
   {Height 12;
   Radius 9;
   Speed 4;
   Scale 0.125;
   +DOOMBOUNCE;
   -NOGRAVITY;
   +WINDTHRUST;
   //+CLIENTSIDEONLY;
   +MOVEWITHSECTOR;
   +MISSILE;
   +NOBLOCKMAP;
   -DROPOFF;
   +NOTELEPORT;
   +FORCEXYBILLBOARD;
   +NOTDMATCH;
   +GHOST;
   Mass 1;
   SeeSound "weapons/smallmagdrop";
   }
   States
   {
   Spawn:
      CLP4 A 1;
	  
	  Exist:
      CLP4 ABCDEFGH 4;
      Goto Spawn+1;
   Death:
      CLP4 G 900;
	  TNT1 A 0 A_JumpIfInventory("CasingsJanitor", 1, "Disappear");
      loop;
	  
   	Disappear:
	  TNT1 A 1;
	  Stop;
   }
}

Class EmptyClip : Actor
{
		override void BeginPlay(void)
	{
		ChangeStatNum(STAT_PB_BULLETS);
		NashGoreStatics.QueueCasings();
		Super.BeginPlay();
	}
  Default
  {Height 12;
   Radius 9;
   Speed 4;
   Scale 1.01;
   +DOOMBOUNCE;
   -NOGRAVITY;
   +WINDTHRUST;
   //+CLIENTSIDEONLY;
   +MOVEWITHSECTOR;
   +MISSILE;
   +NOBLOCKMAP;
   -DROPOFF;
   +NOTELEPORT;
   +FORCEXYBILLBOARD;
   +NOTDMATCH;
   +GHOST;
   Mass 1;
   SeeSound "weapons/largemagdrop";
   }
   States
   {
   Spawn:
      ECLI A 1;
	  
	  Exist:
      ECLI ABCDEFGHABCDEFGHABCDEFGHABCDEFGHABCDEFGH 4;
      Stop;
   Death:
      ECLI G 900;
	  TNT1 A 0 A_JumpIfInventory("CasingsJanitor", 1, "Disappear");
      loop;
	  
  Disappear:
	  TNT1 A 1;
	  Stop;
   }
}

Class EmptyPistolMag : EmptyMagBase
{	
	Default
	{
		Scale 0.20;
		BounceCount 5;
		SeeSound "weapons/emptymag/dropS";
		DeathSound "weapons/emptymag/dropS";
	}
 
	States
	{
		Spawn:
			PEMG A 1;
			Goto Spawn1;
		Spawn1:
			#### A 2 A_SetRoll(roll+36*spinSpeed, SPF_INTERPOLATE); 
			Loop;
		Death:
			#### BC 0; //Preload Sprites
			#### A 0 A_SetRoll(0);
			#### A 900
			{
				frame = frame + (random(1,2));
				bSpriteFlip = random(0,1);
			}
			#### # -1;
			Stop;
		Splash:
			#### # -1;
			Stop;
	}
}

Class EmptyDeagleMag : EmptyMagBase
{
	Default
	{
		Scale 0.20;
		BounceCount 5;
		SeeSound "weapons/emptymag/dropS";
		DeathSound "weapons/emptymag/dropS";
	}
 
	States
	{
		Spawn:
			DEMG A 1;
			Goto Spawn1;
		Spawn1:
			#### A 2 A_SetRoll(roll+36*spinSpeed, SPF_INTERPOLATE); 
			Loop;
		Death:
			#### BC 0; //Preload Sprites
			#### A 0 A_SetRoll(0);
			#### A 900
			{
				frame = frame + (random(1,2));
				bSpriteFlip = random(0,1);
			}
			#### # -1;
			Stop;
		Splash:
			#### # -1;
			Stop;
	}
}

Class SMGEmptyMagazine : EmptyMagBase
{
	Default
	{
		Scale 0.2;
		BounceCount 4;
		SeeSound "weapons/emptymag/dropM";
		DeathSound "weapons/emptymag/dropM";
	}
	
	States
	{
		Spawn:
			ESMG A 1;
			Goto Spawn1;
		Spawn1:
			#### A 2 A_SetRoll(roll+24*spinSpeed, SPF_INTERPOLATE); 
			Loop;
		Death:
			#### BCDE 0; //Preload Sprites
			#### A 0 A_SetRoll(0);
			#### A 900
			{
				frame = frame + (random(1,4));
				bSpriteFlip = random(0,1);
			}
			#### # -1;
			Stop;
		Splash:
			#### # -1;
			Stop;
	}
}


Class EmptyDMRMag : EmptyMagBase
{
	Default
	{
		Scale 0.20;
		BounceCount 4;
		SeeSound "weapons/emptymag/dropM";
		DeathSound "weapons/emptymag/dropM";
	}
	
	States
	{
		Spawn:
			ECL1 A 1;
			Goto Spawn1;
		Spawn1:
			#### A 2 A_SetRoll(roll+24*spinSpeed, SPF_INTERPOLATE); 
			Loop;
		Death:
			#### BCDE 0; //Preload Sprites
			#### A 0 A_SetRoll(0);
			#### A 900
			{
				frame = frame + (random(1,4));
				bSpriteFlip = random(0,1);
			}
			#### # -1;
			Stop;
		Splash:
			#### # -1;
			Stop;
	}
}

Class EmptyHDMRMag : EmptyDMRMag
{
	States
	{
		Spawn:
			HCLI A 1;
			Goto Spawn1;
	}
}


Class EmptyHDMRMag_SNiper : EmptyDMRMag
{
	States
	{
		Spawn:
			HCL2 A 1;
			Goto Spawn1;
		Spawn1:
			#### A 2 A_SetRoll(roll+24*spinSpeed, SPF_INTERPOLATE); 
			Loop;
		Death:
			#### BC 0; //Preload Sprites
			#### A 0 A_SetRoll(0);
			#### A 900
			{
				frame = frame + (random(1,2));
				bSpriteFlip = random(0,1);
			}
			#### # -1;
			Stop;
		Splash:
			#### # -1;
			Stop;
	}
}

Class EmptyCarbineMag : EmptyMagBase
{
	Default
	{
		Scale 0.14;
		BounceCount 4;
		SeeSound "weapons/emptymag/dropM";
		DeathSound "weapons/emptymag/dropM";
	}
	
	States
	{
		Spawn:
			CB10 A 1;
			Goto Spawn1;
		Spawn1:
			#### A 2 A_SetRoll(roll+24*spinSpeed, SPF_INTERPOLATE); 
			Loop;
		Death:
			#### BC 0; //Preload Sprites
			#### A 0 A_SetRoll(0);
			#### A 900
			{
				frame = frame + (random(1,2));
				bSpriteFlip = random(0,1);
			}
			#### # -1;
			Stop;
		Splash:
			#### # -1;
			Stop;
	}
}

Class EmptyNailgunDrum : EmptyMagBase
{
	Default
	{
		Scale 0.6;
		BounceCount 3;
		SeeSound "weapons/emptymag/dropL";
		DeathSound "weapons/emptymag/dropL";
	}
	
	States
	{
		Spawn:
			NEMG A 1;
			Goto Spawn1;
		Spawn1:
			#### A 2 A_SetRoll(roll+12*spinSpeed, SPF_INTERPOLATE); 
			Loop;
		Death:
			#### B 0; //Preload Sprites
			#### A 0 A_SetRoll(0);
			#### A 900
			{
				frame = frame + (random(1,1));
				bSpriteFlip = random(0,1);
			}
			#### # -1;
			Stop;
		Splash:
			#### # -1;
			Stop;
	}
}

Class EmptyNailgunDrum_Javelin : EmptyNailgunDrum
{
	States
	{
		Spawn:
			NEMG C 1;
			Goto Spawn1;
		Spawn1:
			#### C 2 A_SetRoll(roll+12*spinSpeed, SPF_INTERPOLATE); 
			Loop;
		Death:
			#### D 0; //Preload Sprites
			#### A 0 A_SetRoll(0);
			#### C 900
			{
				frame = frame + (random(1,1));
				bSpriteFlip = random(0,1);
			}
			#### # -1;
			Stop;
		Splash:
			#### # -1;
			Stop;
	}
}

Class EmptyMagMP40 : EmptyMagBase //this one is actually used by the MP40
{
	Default
	{
		Scale 0.125;
		BounceCount 4;
		SeeSound "weapons/emptymag/dropM";
		DeathSound "weapons/emptymag/dropM";
	}
	States
	{
		Spawn:
			C1P4 A 1;
			Goto Spawn1;
		Spawn1:
			#### A 2 A_SetRoll(roll+24*spinSpeed, SPF_INTERPOLATE); 
			Loop;
		Death:
			#### BC 0; //Preload Sprites
			#### A 0 A_SetRoll(0);
			#### A 900
			{
				frame = frame + (random(1,2));
				bSpriteFlip = random(0,1);
			}
			#### # -1;
			Stop;
		Splash:
			#### # -1;
			Stop;
	}
}

Class EmptyRocketChamber : Actor
{
		override void BeginPlay(void)
	{
		ChangeStatNum(STAT_PB_BULLETS);
		NashGoreStatics.QueueCasings();
		Super.BeginPlay();
	}
  Default
  {Height 12;
   Radius 9;
   Speed 4;
   Scale 1.3;
   +DOOMBOUNCE;
   -NOGRAVITY;
   +WINDTHRUST;
   //+CLIENTSIDEONLY;
   +MOVEWITHSECTOR;
   +MISSILE;
   +NOBLOCKMAP;
   -DROPOFF;
   +NOTELEPORT;
   +FORCEXYBILLBOARD;
   +NOTDMATCH;
   +GHOST;
   Mass 1;
   SeeSound "weapons/barrelpain";}
   States
   {
   Spawn:
      TNT1 A 0;
      
	  Exist:
      TNT1 A 7 A_StartSound("NULL");
      RCSE ABCDEFGHABCDEFGHABCDEFGHABCDEFGHABCDEFGH 4;
      Stop;
   Death:
      RCSE G 900;
	 TNT1 A 0 A_JumpIf(ACS_NamedExecuteWithResult("ToggleBulletJanitor")==1,"Disappear");
      loop;
   Disappear:
     TNT1 A 1;
     Stop;
   }
}

Class EmptyLMGMag : EmptyMagBase
{
	Default
	{
		Scale 0.25;
		BounceCount 3;
		SeeSound "weapons/emptymag/dropL";
		DeathSound "weapons/emptymag/dropL";
	}
	States
	{
		Spawn:
			DRM9 B 1;
			Goto Spawn1;
		Spawn1:
			#### B 2 A_SetRoll(roll+12*spinSpeed, SPF_INTERPOLATE); 
			Loop;
		Death:
			#### C 0; //Preload Sprites
			#### B 0 A_SetRoll(0);
			#### B 900
			{
				frame = frame + (random(1,1));
				bSpriteFlip = random(0,1);
			}
			#### # -1;
			Stop;
		Splash:
			#### # -1;
			Stop;
	}
}

Class EmptyLMGMissileMag : EmptyLMGMag
{
	States
	{
		Spawn:
			LDR1 B 1;
			Goto Spawn1;
		Spawn1:
			#### B 2 A_SetRoll(roll+12*spinSpeed, SPF_INTERPOLATE); 
			Loop;
		Death:
			#### C 0; //Preload Sprites
			#### B 0 A_SetRoll(0);
			#### B 900
			{
				frame = frame + (random(1,1));
				bSpriteFlip = random(0,1);
			}
			#### # -1;
			Stop;
		Splash:
			#### # -1;
			Stop;
	}
}

Class EmptyASGDrum : Actor
{
		override void BeginPlay(void)
	{
		ChangeStatNum(STAT_PB_BULLETS);
		NashGoreStatics.QueueCasings();
		Super.BeginPlay();
	}
   Default
   {Height 12;
   Radius 9;
   Speed 4;
   Scale 0.57;
   +DOOMBOUNCE;
   -NOGRAVITY;
   +WINDTHRUST;
   //+CLIENTSIDEONLY;
   +MOVEWITHSECTOR;
   +MISSILE;
   +NOBLOCKMAP;
   -DROPOFF;
   +NOTELEPORT;
   +FORCEXYBILLBOARD;
   +NOTDMATCH;
   +GHOST;
   Mass 1;
   SeeSound "weapons/largemagdrop";
   }
   States
   {
   Spawn:
      TNT1 A 0;
      
	  Exist:
      TNT1 A 7 A_StartSound("NULL");
      DRM8 ABCDEFGHABCDEFGHABCDEFGHABCDEFGHABCDEFGH 4;
      Stop;
   Death:
      DRM8 A 900;
	 TNT1 A 0 A_JumpIf(ACS_NamedExecuteWithResult("ToggleBulletJanitor")==1,"Disappear");
      loop;
   Disappear:
     TNT1 A 1;
     Stop;
   }
}

Class EmptyHMGDrum : Actor
{
		override void BeginPlay(void)
	{
		ChangeStatNum(STAT_PB_BULLETS);
		NashGoreStatics.QueueCasings();
		Super.BeginPlay();
	}
   Default
   {Height 12;
   Radius 9;
   Speed 4;
   Scale 0.65;
   +DOOMBOUNCE;
   -NOGRAVITY;
   +WINDTHRUST;
   //+CLIENTSIDEONLY;
   +MOVEWITHSECTOR;
   +MISSILE;
   +NOBLOCKMAP;
   -DROPOFF;
   +NOTELEPORT;
   +FORCEXYBILLBOARD;
   +NOTDMATCH;
   +GHOST;
   Mass 1;
   SeeSound "weapons/largemagdrop";}
   States
   {
   Spawn:
      TNT1 A 0;
      
	  Exist:
      TNT1 A 7 A_StartSound("NULL");
      DRM7 ABCDEFGHABCDEFGHABCDEFGHABCDEFGHABCDEFGH 4;
      Stop;
   Death:
	  TNT1 A 0 A_Jump(128, "Death2");
      DRM7 A 900;
	 TNT1 A 0 A_JumpIf(ACS_NamedExecuteWithResult("ToggleBulletJanitor")==1,"Disappear");
      loop;
   Death2:
      DRM7 I 900;
	 TNT1 A 0 A_JumpIf(ACS_NamedExecuteWithResult("ToggleBulletJanitor")==1,"Disappear");
      loop;
	  
   Disappear:
     TNT1 A 1;
     Stop;
   }
}


Class EmptyCell : EmptyMagBase
{
	Default
	{
		Scale 0.38;
		BounceCount 4;
		SeeSound "weapons/emptymag/dropM";
		DeathSound "weapons/emptymag/dropM";
		-FORCEXYBILLBOARD;
	}
	
	int SmokeTics;
	
	override void Tick()
	{
		if(SmokeTics > 0)
		{
			A_SpawnItemEx("CellSmoke",frandom(-1,1),random(0,-1.0),0,0,0,frandom(0.5,0.1),0,0,0);
			SmokeTics--;
		}
		Super.Tick();
	}
	
	States
	{
		Spawn:
			ECEL A 1
			{
				SmokeTics = 75;
			}
			Goto Spawn1;
		Spawn1:
			#### ABCDEFGHIJKL 2 A_SetRoll(roll+24*spinSpeed, SPF_INTERPOLATE); 
			Loop;
		Death:
			#### L 0 A_SetRoll(0);
			#### M -1;
			Stop;
		Splash:
			#### # -1;
			Stop;
	}
}

Class EmptyCellOL : EmptyCell
{
	States
	{
	   Spawn:
			ECEL A 1
			{
				SmokeTics = 200;
			}
			Goto Spawn1;
		Spawn1:
			#### ABCDEFGHIJKL 2 A_SetRoll(roll+24*spinSpeed, SPF_INTERPOLATE); 
			Loop;
		Death:
			#### MNOP 0; //Preload Sprites
			#### L 0 A_SetRoll(0);
			#### L 1
			{
				frame = frame + (random(1,4));
				bSpriteFlip = random(0,1);
			}
			#### ##### 25 A_StartSound("BEEEP");
			Goto Explode;
		Splash:
			#### # -1;
			Stop;
					
		Explode:
			TNT1 A 0 A_StartSound("BEPBEP");
			TNT1 A 0 A_StartSound("BEEEP");
			TNT1 A 5;
			TNT1 A 0 A_Stop;
			TNT1 A 0 A_StopSound(6);
			TNT1 A 0;
			TNT1 A 0; 
			TNT1 A 0 A_Explode(200,200, XF_HURTSOURCE);
			TNT1 A 0 A_SpawnItemEx ("HandGrenadeExplosion",0,0,30,0,0,0,0,SXF_NOCHECKPOSITION,0);
			TNT1 A 0 A_SpawnItem("WhiteShockwave");
			TNT1 A 0 A_SpawnItemEx ("DetectFloorCrater",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0);
			TNT1 A 0 A_SpawnItemEx ("DetectCeilCrater",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0);
			TNT1 A 0 A_SpawnItemEx ("BarrelKaboom",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0);
			TNT1 A 0 A_SpawnItemEx ("NewGroundExplosionSmoke",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0);
			TNT1 AAAAAAA 0 A_SpawnProjectile ("ExplosionFlames", 0, 0, random (0, 360), 2, random (0, 360));
			TNT1 AAAAAAAAAAAAAAAAAAAAAAAAAA 0 A_SpawnProjectile ("ExplosionParticleHeavy", 0, 0, random (0, 360), 2, random (0, 180));
			TNT1 AAAAAA 0 A_SpawnProjectile ("ExplosionParticleHeavy", 0, 0, random (0, 360), 2, random (0, 180));
			EXPL A 0 Radius_Quake (2, 24, 0, 15, 0);
			BEXP B 0 BRIGHT A_Scream;
			TNT1 A 0 A_ALertMonsters;
			TNT1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA 0 A_SpawnProjectile ("ShrapnelParticle2", 0, 0, random (0, 360), 2, random (5, 90));
			TNT1 A 0 A_StartSound("excavator/explode");
			TNT1 A 0 A_StartSound("FAREXPL", 3);
			TNT1 A 0 A_SpawnItem("BarrelExplosionSmokeColumn");
			TNT1 A 0 A_SpawnItem("FragGrenadeExplosionSmoke");
			Stop;
	  
	}
}