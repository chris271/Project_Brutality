class PB_Projectile : FastProjectile abstract
{
	enum ExplosionType
	{
		EType_Geometry,
		EType_Actor,
		EType_BleedingActor
	}
	
	override void BeginPlay()
	{
		super.BeginPlay();
		startPos = pos;
		oldpos = pos;
	}
	
	array<PlayerPawnBase> alreadyWhizzedBy;
    array<Actor> ignoreList;
	double distanceTraveled;
	vector3 oldPos;
	sound whizSound;
	
	// whiz radii
	const WHIZ_DIST_STEP = 1500;
	const WHIZ_DIST_MED = WHIZ_DIST_STEP; 
	const WHIZ_DIST_FAR = WHIZ_DIST_STEP * 2; 
	
	const WHIZ_PLRDIST_LIMIT = 256 ** 2;
	const WHIZ_PLRDIST_STEP = WHIZ_PLRDIST_LIMIT / 3;
	const WHIZ_PLRDIST_MED = WHIZ_PLRDIST_STEP * 0.5;
	const WHIZ_PLRDIST_FAR = WHIZ_PLRDIST_STEP * 1.5;

	virtual int Handle_MissileHit(Actor victim)
	{
		double scaled_damage = truedamage;
		Name dmgType = DamageType;
		double ang;
		
		if(target)
		{
			ang = AbsAngle(self.Angle, AngleTo(victim));
			ang = AbsAngle(ang, AngleTo(target));
		}
		
		let ptrPBMon = PB_Monster(victim);
		
		if (!bNOCRITICALS && Pos.Z > victim.Pos.Z + victim.Height * ((ptrPBMon) ? ptrPBMon.posTorsoHB : 0.65))
		{
			//Console.Printf("Critical");
			scaled_damage = scaled_damage * ((ptrPBMon) ? ptrPBMon.dmgTorsoMult : 1.25);
			dmgtype = damagetype;
			if (Pos.Z > victim.Pos.Z + victim.Height * ((ptrPBMon) ? ptrPBMon.posHeadHB : 0.80))
			{
				// Check if the monster doesn't ignore headshots else default to 0 (its funky)
				if(!((ptrPBMon) ? ptrPBMon.ignoreHeadDamage : 0))
				{
					dmgtype = "Head";
					//A_StartSound("headshotmarker", CHAN_AUTO, CHAN_UI);
					scaled_damage = scaled_damage * ((ptrPBMon) ? ptrPBMon.dmgHeadMult : 1.25);
				}
			}
// 			else
// 			{
// 				//A_StartSound("torsshotmarker", CHAN_AUTO, CHAN_UI);
// 			}
		}
		else if (Pos.Z < victim.Pos.Z + victim.Height * ((ptrPBMon) ? ptrPBMon.posLegHB : 0.40) && !((ptrPBMon) ? ptrPBMon.ignoreLegDamage : 0))
		{
			if (Pos.Z > victim.Pos.Z + victim.Height * ((ptrPBMon) ? ptrPBMon.posDickHB : 0.38) && !((ptrPBMon) ? ptrPBMon.ignoreDickDamage : 0))
			{
				//Console.Printf("Dick Shot");
				//A_StartSound("apenshotmarker", CHAN_AUTO, CHAN_UI);
				dmgtype = "Dick";
				scaled_damage = scaled_damage * ((ptrPBMon) ? ptrPBMon.dmgDickMult : 0.95);
			}
			else
			{
				//Console.Printf("Legshot");
				//A_StartSound("apenshotmarker", CHAN_AUTO, CHAN_UI);
				dmgtype = "Leg";
				scaled_damage = scaled_damage * ((ptrPBMon) ? ptrPBMon.dmgLegMult : 0.7);
			}
		}
		else if (!bOMNIDIRECTIONAL && ang > 32 && ang < 148 && !((ptrPBMon) ? ptrPBMon.ignoreArmDamage : 0))
		{
			//Console.Printf("Armshot");
			//A_StartSound("apenshotmarker", CHAN_AUTO, CHAN_UI);
			dmgtype = "Arm";
			scaled_damage = scaled_damage * ((ptrPBMon) ? ptrPBMon.dmgArmMult : 0.8);
		}
		else
		{
			//A_StartSound("bodyshotmarker", CHAN_AUTO, CHAN_UI);
			dmgtype = damagetype;
			scaled_damage = scaled_damage * ((ptrPBMon) ? ptrPBMon.dmgLowTorsoMult : 1);
		}
		
		scaled_damage = victim.GetModifiedDamage(dmgType, scaled_damage, true, self, target);
		
		if(victim.bsolid || victim.bshootable)	//dont spawn puffs on casings,ammo,etc
		{
			if(victim.bNOBLOOD || victim.bINVULNERABLE || victim.bDORMANT || victim.bREFLECTIVE || (victim.bsolid && ! victim.bShootable))
				SpawnPuff("PB_NoBloodPuff", pos, angle, 0, 0, PF_HITTHING);
			else
				victim.SpawnBlood( pos, angle, ceil(scaled_damage) );	
		}
		
		victim.DamageMobj(self, target, ceil(scaled_damage), dmgType, 0, angle);
		
		// ( victim.bISMONSTER || victim.BloodType != 'Blood' ) 
		
		OnHitActor(target, dmgType);
		
		// [gng] prevent missile from ripping through or getting stuck on bosses
		if (bRIPPER && victim.bBOSS && bNOBOSSRIP)		
		{
			// OnExplode (FindExplosionType(BlockingMobj));
			// ExplodeMissile(BlockingLine, BlockingMobj);
			// console.printf("penis");
			return 0;
		}
		
		return -1;
	}
	
	override int SpecialMissileHit(Actor victim)
	{
		if (victim == Target && !bHitOwner  || (!victim.bSHOOTABLE && (target && target.player)))
		{
			return 1; //[inkoalawetrust] //This is default behavior though ?
		}
		
		if (bRIPPER)
		{
			if (ripAmount < 1)
			{
				return 0; // [Ace] We must use 0 here or else the projectile will keep ripping. Removing the ripper flag does not take effect until the next tic because of how ripping works.
			}
			if (LastActor != victim && Victim)
			{
				ripAmount = ripAmount - 1;
				let retval = Handle_MissileHit(victim);
				LastActor = victim;
                return retval;
			}
			else
			{
				return 1;
			}
		}
        else
        {
            let retval = Handle_MissileHit(victim);
            LastActor = victim;
            return retval;
        }
		return -1;
	}
	
	virtual void ActivateLines()
	{
		if(noActivation == -1) return;
		if(noActivation == 1) noActivation=-1;
		
		let lt = LineActivatorTracer.DoTrace(self, angle, pitch, max(128, vel.length()));
		for(int i = 0; i < lt.HitLines.Size(); i++)
		{
			let ln = lt.HitLines[i];
			if(ln) ln.Activate(target, 0, SPAC_Impact);
		}
		if(BlockingLine) BlockingLine.Activate(target, 0, SPAC_Impact);
	}
	
	virtual bool PenetrateWall(Vector3 frac)
	{
		if(!GetCVar("pb_wallpenetration") || Speed <= 0 || Mass <= 0 || penetrationCount == 0) 
			return false;
		
		Vector3 lastP = pos;
		double depth = (0.5 * (Mass * 0.075) * (Speed * 2)) * 0.05;
					   //(0.5 * (Mass * 0.001) * (Speed ** 2)) * 0.005;
		//console.printf ("Depth: %.4f", depth);
		Vector3 unit = frac/frac.length();
		Vector3 penDest = lastP+unit*depth;
		if(Level.IsPointInLevel(penDest))
		{
			//console.printf ("Penetrating wall");
			setOrigin(penDest, false);
			
			Angle -= 180;
			Pitch = -Pitch;

			FLineTraceData backTraceData;
			bool hit = LineTrace(Angle, depth + 1, Pitch, flags: TRF_ABSOFFSET| TRF_THRUACTORS, data: backTraceData);
			if(!hit)
			{
				//console.printf ("No exit found");
				setOrigin(lastP, false);
				Angle += 180;
				Pitch = -Pitch;
				return false;
			} else {
				double dist = Level.Vec3Diff( backTraceData.HitLocation, lastP ).length();
				if(dist < depth)
				{
					//console.printf ("Found an exit at %.5f units", dist);
					Vector3 offset = unit * (radius * 2);
					setOrigin(backTraceData.HitLocation + offset, false);
					Angle += 180;
					Pitch = -Pitch;
					
					noActivation = 1;
					penetrationCount--;
					truedamage *= .8;
					Speed *= .8;
					Mass *= .8;
					return true;
				} else {
					//console.printf ("Exit distance greater than depth");
					setOrigin(lastP, false);
					Angle += 180;
					Pitch = -Pitch;
					return false;
				}
			}
		}
		return false;
	}

    void DrawParticlesBetweenPoints(vector3 startpos, vector3 endpos, double partDist = 1, int partTics = 1, color partColor = color("00FF00"), int flags = SPF_FULLBRIGHT|SPF_NOTIMEFREEZE)
	{
		// Get the vector between them and normalize it:
		let diff = Level.Vec3Diff(startpos, endpos);
		let dir = diff.Unit();
		let dist = diff.Length();
		
		// Make sure distance between particles is no less
		// than 1. From that, get how many particles
		// we'll need to spawn:
		partDist = Clamp(partDist, 1., dist);
		int partSteps = int(dist / partDist);
		
		// Spawn the particles:
		vector3 nextPos = startpos;
		FSpawnParticleParams traceParticle;
		traceParticle.color1 = partColor;
		traceParticle.lifetime = partTics;		
		traceParticle.size = 1;
		traceParticle.StartAlpha = 1;
		traceParticle.flags = flags;
		for (int i = 1; i <= partSteps; i++)
		{
			traceParticle.pos = nextPos;
			Level.Spawnparticle(traceParticle);
			nextPos += dir * partDist;
		}
	}
	
	// [gng] optimized fastprojectile code
    // no excessive amount of steps, just a few linetracers
	virtual void FastProjectileTick()
	{
        vel.z -= GetGravity();
        double dist = bRANGED ? clamp(vel.Length(), 0, destroyRange) : vel.Length();
        INTERNAL_SpecLineTracer trac = INTERNAL_SpecLineTracer.Predict(self, vel.Unit(), dist, 0, 0x01000000, ignore: BlockingMobj);
        TraceResults specHit = trac.results;
        SetOrigin(specHit.HitPos, true);

        if(bRANGED)
        {
            destroyRange -= specHit.Distance;
            if(destroyRange <= 0)
            {
                console.printf("distance reached");
                Destroy();
                return;
            }
        }

        vector3 savedPos = pos;
        if(bRIPPER)
        {
            for(int i = 0; i < trac.hitActors.Size(); i++)
            {  
                BlockingMobj = trac.hitActors[i];
                if(!BlockingMobj) continue;
                SetOrigin((trac.hitActorsPosX[i], trac.hitActorsPosY[i], trac.hitActorsPosZ[i]), false);
                if(bBounceOnActors)
                {
                    if(!BounceActor(BlockingMobj, false))
                    {
                        ExplodeMissile(NULL, BlockingMobj);
                        OnExplode(FindExplosionType(BlockingMobj));
                    }
                    return;
                }

                if(BlockingMobj && ReflectOffActor(BlockingMobj)) 
                    return;

                let retval = SpecialMissileHit(BlockingMobj);

                if(retval == 0)
                {
                    ExplodeMissile(NULL, BlockingMobj);
                    OnExplode(FindExplosionType(BlockingMobj));
                    return;
                }
                else if(retval == 1)
                    continue;

                LastActor = BlockingMobj;
            }
            //SetOrigin(savedPos, false);
        }
        else if(specHit.HitType == TRACE_HitActor)
        {
            BlockingMobj = specHit.HitActor;
            if(BlockingMobj) 
            {
                SetOrigin((specHit.HitPos), false);
                if(bBounceOnActors)
                {
                    if(!BounceActor(BlockingMobj, false))
                    {
                        ExplodeMissile(NULL, BlockingMobj);
                        OnExplode(FindExplosionType(BlockingMobj));
                    }
                    return;
                }

                if(BlockingMobj && ReflectOffActor(BlockingMobj)) 
                    return;

                SpecialMissileHit(BlockingMobj);
                ExplodeMissile(NULL, BlockingMobj);
                OnExplode(FindExplosionType(BlockingMobj));
                return; 
            }     
        }

        if(specHit.HitTexture == skyflatnum)
        {
            Destroy();
            return;
        }

        double dontcare;
        F3DFloor stilldontcare;
        switch(specHit.HitType)
        {
            case TRACE_HitWall:
                BlockingLine = specHit.HitLine;
                if(BounceWall())
                {
                    PlayBounceSound(false);
                    return;
                }

                SetOrigin(specHit.HitPos, false);

                if(PenetrateWall(vel / 512.f)) 
                {
                    PB_SpawnImpact(specHit);
                    return;
                }

                PB_SpawnImpact(specHit);
                ExplodeMissile(BlockingLine, NULL);
                OnExplode(EType_Geometry);
                return;

                break;
            case TRACE_HitFloor:
                SetOrigin(specHit.HitPos, false);
                BlockingFloor = specHit.HitSector;
                PB_SpawnImpact(specHit);
                ExplodeMissile(NULL, NULL);
                OnExplode(EType_Geometry);
                return;

                break;

            case TRACE_HitCeiling:
                SetOrigin(specHit.HitPos, false);
                BlockingCeiling = specHit.HitSector;
                PB_SpawnImpact(specHit);
                ExplodeMissile(NULL, NULL);
                OnExplode(EType_Geometry);
                return;

                break;
        }

        if (!CheckNoDelay())
			return;

		// Advance the state
		if (tics != -1)
		{
			if (tics > 0) tics--;
			while (!tics)
			{
				if (!SetState (CurState.NextState))
				{ // mobj was removed
					return;
				}
			}
		}
	}
	
	override void Tick()
	{
		if (!bNOTIMEFREEZE && IsFrozen())
			return;
		
		activateLines();
		
		FastProjectileTick(); //We just use our own copy of the Tick() method for bouncing.
		
		if(!bNOWHIZBY) 
			PB_HandleWhizby();
		
		oldPos = pos;
	}
	
	// ported from CRYENGINE
	// Available at https://github.com/MergHQ/CRYENGINE/blob/8b63f61c6bb186fbee254b793775856468df47c5/Code/GameSDK/GameDll/Projectile.cpp#L1377-L1377
	// crytek plz dont sue
	void PB_HandleWhizby()
	{
		PB_PlayerPawn plr = PB_PlayerPawn(players[consoleplayer].mo);
		if(!target || plr == target)
			return;
		
		if(alreadyWhizzedBy.Find(plr) != alreadyWhizzedBy.Size())		
			return;

		vector3 soundPosition;
		vector3 cPlayerPos = plr.pos;
		cPlayerPos.z = plr.player.ViewZ;

		double distanceSq = PointInLineSquared(cPlayerPos, oldpos, pos, soundPosition.x, soundPosition.y, soundPosition.z);

		if (distanceSq < WHIZ_PLRDIST_LIMIT)
		{
			string playerDist;
			if(distanceSq > WHIZ_PLRDIST_FAR)
				playerDist = "far";
			else if(distanceSq > WHIZ_PLRDIST_MED)
				playerDist = "med";
			else
				playerDist = "near";

			string whizdist;
			if(distanceTraveled > WHIZ_DIST_FAR)
				whizDist = "far";
			else if(distanceTraveled > WHIZ_DIST_MED)
				whizDist = "med";
			else
				whizDist = "near";
				
			vector3 soundDir = (soundPosition - oldpos);
			vector3 dir = (pos - oldpos);
			double bulletDist = dir.LengthSquared();
			double dotProduct = dir dot soundDir;
			
			if(dotProduct > 0.0 && dotProduct < bulletDist)	
			{
				sound whizSound = "whiz/"..whizDist.."/"..playerDist.."/in";

				if(bWHIZCRACK) 
                    A_StartSound("bulletcrack/"..playerDist, CHAN_AUTO);
				else
					A_StartSound(whizsound, CHAN_AUTO, pitch: frandom(0.9, 1.1));

				alreadyWhizzedBy.Push(plr);
			}
		}
	}

	double PointInLineSquared(vector3 vPoint, vector3 vLineStart, vector3 vLineEnd, out double linePtX, out double linePtY, out double linePtZ)
	{
		vector3 dir;
		vector3 pointVector;
		vector3 linePt = (linePtX, linePtY, linePtZ);
	
		if ((vPoint - vLineStart).LengthSquared() > (vPoint - vLineEnd).LengthSquared())
		{
			dir = vLineStart - vLineEnd;
			pointVector = vPoint - vLineEnd;
			linePt = vLineEnd;
		}
		else
		{
			dir = vLineEnd - vLineStart;
			pointVector = vPoint - vLineStart;
			linePt = vLineStart;
		}
	
		double dirLen2 = dir.LengthSquared();
		if (dirLen2 <= 0.0)
			return pointVector.LengthSquared();
		dir /= sqrt(dirLen2);
	
		double t0 = pointVector dot dir;
		linePt += t0 * dir;
		linePtX = linePt.x;
		linePtY = linePt.y;
		linePtZ = linePt.z;
		return (vPoint - linePt).LengthSquared();
	}
	
	// [Ace] Override these if you want to do stuff when something happens.
	protected virtual void OnHitActor(Actor target, Name dmgType) {}
	protected virtual void OnExplode(int type) {}
	
	ExplosionType FindExplosionType (Actor Victim) //Determine what impact type to use.
	{
		If (!Victim) //No impact victim ? Probably level geometry.
			return EType_Geometry;
		
		If (((Victim.bShootable && Victim.bCorpse) || Victim.bKilled ) && Victim.bNoBlood) //https://www.youtube.com/watch?v=K63AVSCPcSI
			return EType_Actor;
		
		return EType_BleedingActor; //https://www.youtube.com/watch?v=BlrjHLnNzAo
	}
	
	// [Ace] In case you have attached anything to this item, calling OwnerDied allows you to do some effects on death.
	protected void CallOwnerDied()
	{
		for (Inventory next = Inv; next != null; next = next.Inv)
		{
			next.OwnerDied();
		}
	}

	string PB_GetImpact(name texname)
	{
		string tmpstring = texName;
		string mat;
		switch(PB_Materialsys.GetMaterialFromTexName(texname))
		{
			default:
			case 'tile/a':
			case 'tile/b':
			case 'hard':
			case 'carpet':
				mat = "PB_BulletImpact";
				break;
			case 'flesh':
				mat = "NashGoreBlood";
				break;
			case 'lava':
				mat = "PB_BulletImpact";
				break;
			case 'dirt':
			case 'gravel':
				mat = "PB_BulletImpactDirt";
				break;
			case 'wood':
				mat = "PB_BulletImpactWood";
				break;
			case 'rock':
				mat = "PB_BulletImpactBrownRock";
				break;
			case 'metal/a':
				mat = "PB_BulletImpactMetal";
				break;
			case 'metal/b':
				mat = "PB_BulletImpactSheetMetal";
				break;
			case 'water':
				tmpstring = tmpstring.MakeLower();
				
				if(tmpstring.IndexOf("blood") >= 0 || tmpstring.IndexOf("bfall") >= 0)
					mat = "PB_BulletImpactBlood";
				else
					mat = "PB_BulletImpactWater";

				break;
			case 'slime':
				tmpstring = tmpstring.MakeLower();
				
				if(tmpstring.IndexOf("slime") >= 0)
					mat = "PB_BulletImpactSlime";
				else
					mat = "PB_BulletImpactNukage";

				break;
		}
		return mat;
	}

	double ExtraDamageFactor;
	protected Actor LastActor;
	
	Array<Actor> act_hits;
	Actor hitactor;
	Actor LastRipped, PreLastRipped; //The actor that a ripper last hit. Used for the RIPONCE flag.
	int ripamount;
	Property RipperCount : ripamount;
	
	int destroyRange;
	Property ProjectileRange : destroyRange;
	
	double truedamage;
	Property BaseDamage : truedamage;
	
	int penetrationCount;
	Property PenetrationCount : penetrationCount;
	
	private int BehaviorFlags;
	flagdef NoCriticals: BehaviorFlags, 0;
	flagdef Omnidirectional: BehaviorFlags, 1;
	flagdef InvisiblePuff: BehaviorFlags, 2;
	flagdef RipOnce: BehaviorFlags, 3;
	flagdef RANGED: BehaviorFlags, 4;
	flagdef NOWHIZBY: BehaviorFlags, 5;
	flagdef WHIZCRACK: BehaviorFlags, 6;
	flagdef SMALLIMPACT: BehaviorFlags, 7;
	
	vector3 startPos;
	int noActivation;

    void PB_SpawnImpact(TraceResults tr) 
	{
		PB_BaseBulletImpact puff;
		double normal;
		int hitSurfaceType;
		TextureID surfaceTexId;
        SecPlane refPlane;
			
		bool side;

        switch(tr.HitType)
        {
            case TRACE_HitWall:
                side = tr.Side;
                // find what angle the line is facing
                vector2 normals = PB_Math.GetLineNormal(side, tr.HitLine);
                normal = -atan2(normals.x, normals.y);
                hitSurfaceType = 1;
                break;
            case TRACE_HitFloor:
                refPlane = tr.HitSector.floorplane;
                hitSurfaceType = 2;
                normal = -90;
                break;
            case TRACE_HitCeiling:
                refPlane = tr.HitSector.ceilingplane;
                hitSurfaceType = 3;
                normal = -90;
                break;
        }

        surfaceTexId = tr.HitTexture;
        string impact;
        impact = PB_GetImpact(Texman.GetName(surfaceTexId));
        puff = PB_BaseBulletImpact(SpawnPuff(impact, pos, angle, normal + 90, 0));
        
        if(puff)
        {
            if(BlockingLine && puff.DecalGenerator)
                self.DecalGenerator = puff.default.DecalGenerator;

            puff.refPlane = refPlane;
            puff.hitWhat = hitSurfaceType;
            puff.wallNormal = normal + 90;
            puff.smallCal = bSMALLIMPACT;
        }
	}

	Default
	{
		// [Ace] Speedy projectiles with a large radius are more performant, but they don't work so well with switches that rely on hitscan activation
		// if the linedefs are packed right in front of a wall. Normally this shouldn't be a problem, but in some cases it is, such as Sigil's E5M1 switch at map start.
		Speed 320;
		Mass 25;
		Radius 1;
		Height 2;
		Projectile;
		+GETOWNER
		+NODAMAGETHRUST
		+NOEXTREMEDEATH
		+FORCERADIUSDMG
		+NODAMAGETHRUST
		+HITTRACER
		+NOBOSSRIP
		+RIPPER
		+BLOODLESSIMPACT
		-NOGRAVITY
		+PB_Projectile.RipOnce;
		-PB_Projectile.SMALLIMPACT;
		+NOTIMEFREEZE;
		ProjectileKickBack 20;
		Renderstyle "Add";
		// Decal "ConcreteBullethole";
		Scale 0.15;
		PB_Projectile.RipperCount 1;
		PB_Projectile.BaseDamage 5;
		PB_Projectile.PenetrationCount 3;
		Gravity 0.1;
	}
	
	States
	{
		Spawn:
			TNT1 A 1;
			TRAC A -1 BRIGHT;
			Stop;
		Death: // [Ace] Wall.
			TNT1 A 0
			{
				CallOwnerDied();
				OnExplode(EType_Geometry);

				//A_StopAllSounds();
			}
			Stop;
		Crash: // [Ace] Dormant/NoBlood enemies.
			TNT1 A 0
			{
				CallOwnerDied();
				OnExplode(EType_Actor);
				//console.printf("hit");
			}
			Stop;
		XDeath: // [Ace] Bleeding enemies.
			TNT1 A 0
			{
				CallOwnerDied();
				OnExplode(EType_BleedingActor);
			}
			Stop;
	}
}

class LineActivatorTracer : LineTracer
{
	Actor src;
	Array<Line> HitLines;

	play static LineActivatorTracer DoTrace(Actor src, double tangle, double tpitch, double dist, uint traceflags = 0)
	{
		LineActivatorTracer tracer = new("LineActivatorTracer");
		if(tracer) 
		{
			tracer.src = src;
			vector3 dir = PB_Math.VecFromAngles(tangle, tpitch);
			tracer.Trace(src.pos, src.CurSector, dir, dist, traceflags);
		}
		return tracer;
	}

	// Thanks to PhantomBeta 
	// (https://github.com/Doom2fan/Se7evidas/blob/master/PK3%20Source/S7ZScript/Bases/S7_Projectile/Linetracer.ZS)
    transient Array<F3DFloor> ffloorsToIgnore;
	ETraceStatus HandleWall() 
	{
		let hl = Results.HitLine;
		HitLines.push(hl);

        if (Results.Tier == TIER_Upper || Results.Tier == TIER_Lower)
            return TRACE_Stop;

        if (Results.ffloor && ffloorsToIgnore.Find (Results.ffloor) == ffloorsToIgnore.Size ())
		{
            ffloorsToIgnore.Push (Results.ffloor);
            return TRACE_Stop;
        }

        if (Results.Tier == TIER_Middle && !hl.backsector)
			return TRACE_Stop;

        if (Results.Tier == TIER_Middle && (hl.flags & Line.ML_Blocking) && (hl.flags & Line.ML_TwoSided))
            return TRACE_Skip;

        if ((hl.flags & Line.ML_3DMidTex) && !(hl.flags & Line.ML_3DMidTex_Impass))
            return TRACE_Stop;

        if (hl.flags & (Line.ML_Blocking | Line.ML_BlockEverything))
            return TRACE_Stop;

        return TRACE_Skip;
    }

	override ETraceStatus TraceCallback()
	{
		if(results.HitType == Trace_HitWall)
		{
			let stat = HandleWall();
			return stat;
		}
		if(results.HitType == Trace_HitActor)
		{
			return Trace_Skip;
		}
		return Trace_Stop;
	}
}

/* [Pop] Dummy Class for Reference, has notes too

class PB_M16 : PB_Projectile
{
	Default
	{
		PB_Projectile.BaseDamage 15; this IS NOT multiplied by random(1,3), do keep that in mind
		PB_Projectile.RipperCount 2; this is always +1, IE 2 is 3 enemies
		Obituary "%o was blasted with bullets %k.";
	}
}*/

class INTERNAL_SpecLineTracer : LineTracer
{
    actor target, src;
    Array<actor> hitActors;
    Array<double> hitActorsPosX;
    Array<double> hitActorsPosY;
    Array<double> hitActorsPosZ;
    
    play static INTERNAL_SpecLineTracer Predict(Actor src, vector3 direction, double maxDist, ETraceFlags traceFlags, uint wallMask = 0xFFFFFFFF, bool ignoreAllActors = false, Actor ignore = null)
	{
		INTERNAL_SpecLineTracer tracer = new("INTERNAL_SpecLineTracer");
		if(tracer) 
		{
			tracer.target = src.target;
            tracer.src = src;
			tracer.Trace(src.pos, src.CurSector, direction, maxDist, traceFlags, wallMask, ignoreAllActors, ignore);
		}
		return tracer;
	}
    
    override ETraceStatus TraceCallback()
    {
        if(Results.HitType == TRACE_HitActor)
        {
            if(Results.HitActor == target && !src.bHitOwner)
                return TRACE_Skip;
            else if(Results.HitActor.bSHOOTABLE) 
            {
                if(src.bRIPPER)
                {
                    hitActors.Push(Results.HitActor);
                    hitActorsPosX.Push(Results.HitPos.X);
                    hitActorsPosY.Push(Results.HitPos.Y);
                    hitActorsPosZ.Push(Results.HitPos.Z);
                    return TRACE_Continue;
                }
                return TRACE_Stop;
            }
            else 
                return TRACE_Skip;
        }

        return TRACE_Continue;
    }
}

#include "zscript/Weapons/Projectiles/AltBulletProjectile.zs"