// Copyright 2006-2019 Nash Muhandes
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//===========================================================================
//
//
//
//===========================================================================

class NashGoreBloodBase : Blood
{
	Default
	{
		FloatBobPhase 0;
		+NOBLOCKMAP
		+PUFFGETSOWNER
		+FORCEXYBILLBOARD
		+RANDOMIZE
		+DONTSPLASH
		+NOTELEPORT
		-SOLID
	}

	const BLOOD_FLAGS = SXF_TRANSFERTRANSLATION | SXF_ABSOLUTEPOSITION | SXF_ABSOLUTEANGLE |
		SXF_ABSOLUTEVELOCITY;

	//===========================================================================
	//
	//
	//
	//===========================================================================

	action void SpawnCeilingBlood() {
		FLineTraceData t;
		int flags = TRF_THRUACTORS;

		double ang = frandom(0, 360);

		LineTrace(ang, 32, frandom(-90, 0), flags, 0, data: t);

		if (t.HitType == t.TRACE_HitCeiling)
		{
			bool result;
			Actor obj;

			// ceiling blood
			if (nashgore_bloodtype == 0 || nashgore_bloodtype == 1)
			{
				class<Actor> cls;
				cls = "PB_BloodSpotCeiling";

				[result, obj] = A_SpawnItemEx(cls, flags: SXF_USEBLOODCOLOR | BLOOD_FLAGS, 150);
				if (obj)
				{
					obj.Gravity = 0;
					obj.SetOrigin(t.HitLocation, true);
					PB_BloodSpotCeiling(obj).bOnCeiling = true;

					// flip sprite Y
					if (nashgore_spriteblood) obj.Scale.Y *= -1;
				}
			}
		}
	}
	
	override void BeginPlay(void)
	{
		Super.BeginPlay();

		if (!level.IsPointInLevel(Pos))
		{
			Destroy();
			return;
		}

		NashGoreStatics.RandomXFlip(self);
	}

	override void PostBeginPlay(void)
	{
		if (random() < (255 - nashgore_bloodamount)) { Destroy(); return; }
		Super.PostBeginPlay();
	}
}

//===========================================================================
//
//
//
//===========================================================================

class NashGoreBloodImpact : NashGoreBloodBase
{
	Default
	{
		Scale 0.75;
		+NOINTERACTION
		+NOGRAVITY
	}

	override void PostBeginPlay(void)
	{
		Super.PostBeginPlay();
		NashGoreStatics.RandomXFlip(self);
	}

	States
	{
	Spawn:
		TNT1 A 0 NoDelay A_StartSound("bulletfleshimpact");
		bimp ABCDE 2;
		Stop;
	}
}

//===========================================================================
//
//
//
//===========================================================================

class PB_BloodCloud : NashGoreBloodBase
{
	Default
	{
		+NOBLOCKMAP;
        +NOTELEPORT;
        +DONTSPLASH;
        +FORCEXYBILLBOARD;
        +NOINTERACTION;
        +NOGRAVITY;
        +THRUACTORS;
        +ROLLSPRITE;
        +ROLLCENTER;
        +NOCLIP;

		Scale 0.7;
		Alpha 0.7;
		RenderStyle "Shaded";
	}
	
	double dissipateRotation;
    vector3 posOfs;
	
	override void PostBeginPlay()
    {
		if(!target)
		{
			self.Destroy();
			return;
		}
		
		CopyBloodColor(target);
		
		if(bloodcolor == 0)
			SetShade(0xff680000);
		else
		{
			Color bcbuffer;
			bcbuffer = Color(255, bloodcolor.r / 2, bloodcolor.g / 2, bloodcolor.r / 2);
			SetShade(bcbuffer);
		}
		
		dissipateRotation = frandom(0.7, 1.4) * randompick(-1, 1);
        bXFLIP = randompick(0, 1);
        bYFLIP = randompick(0, 1);
		roll = frandom(0, 359);
		scale *= frandom(1.0, 1.1);
		scale *= 0.2;
		alpha *= frandom(1.0, 1.2);
    }

    States 
    {
        Spawn:
            BLER A 1 NoDelay {
                if(GetAge() < 18) 
                {
					if(GetAge() < 3) 
						scale *= 1.6;
					else
					{
						scale *= 1.02;
						A_Fadeout(0.03, FTF_CLAMP|FTF_REMOVE);
					}
                    	
					vel *= 0.9;
						
                    roll += dissipateRotation;
                    dissipateRotation *= 0.96;
                    
                    if(CeilingPic == SkyFlatNum) {
                        vel.y += 0.02; // wind
                        vel.z += 0.01;
                        vel.x -= 0.01;
                    }
                }
                else
                {
                    A_Fadeout(0.04, FTF_CLAMP|FTF_REMOVE);
                    scale *= 1.01;
                    vel *= 0.7;
                    roll += dissipateRotation;
                    dissipateRotation *= 0.95;
                    
                    if(CeilingPic == SkyFlatNum) {
                        vel.y += 0.03; // wind
                        vel.z += 0.015;
                        vel.x -= 0.015;
                    }
                }
            }
            Loop;
    }
}

class PB_GibBloodCloud : PB_BloodCloud
{
	Default
	{
		Scale 1.0;
	}
	
	override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		
		alpha = frandom(2.0, 3.0);
	}
}

//===========================================================================
//
//
//
//===========================================================================

class NashGoreBlood : NashGoreBloodBase replaces Blood
{
	Default
	{
		+NOGRAVITY
		-RANDOMIZE
	}

	int chanceMod;

	//===========================================================================
	//
	//
	//
	//===========================================================================

	States
	{
	Spawn:
		TNT1 A 0 { chanceMod = 0;		return ResolveState("Spawn2"); }
		TNT1 A 0 { chanceMod = 100;		return ResolveState("Spawn2"); }
		TNT1 A 0 { chanceMod = 220;		return ResolveState("Spawn2"); }
		
	Spawn2:
		TNT1 A 0
		{
			A_SpawnItemEx("PB_BloodCloud", frandom(-5, 5), frandom(-5, 5), frandom(-5, 5), flags: BLOOD_FLAGS | SXF_TRANSFERPOINTERS);
			
			A_SpawnItemEx("NashGoreBloodImpact", flags: BLOOD_FLAGS);
			
			A_SpawnProjectile("BloodSplasher", 0, 0, random (0, 360), 2, random (0, 160));
			
			A_SpawnProjectile ("WaterBloodCHecker", 7, 0, random (0, 360), 2, random (30, 60));
			for (int i = 0; i < 3; i++)
			{
				A_SpawnProjectile("NashGoreBloodParticle1", 0, 0, random (0, 360), 0, random (20, 40));
			}

			int cloudCount = randompick(0, 0, 0, 0, 0, 0, 1, 2, 3);
			for (int i = 0; i < cloudCount; i++)
			{
				SpawnMainPuffSecondary();
			}
		}
		TNT1 AA 0
		{
			A_SpawnItemEx("NashGoreBloodParticle2",
				frandom(-8, 8), frandom(-8, 8), frandom(-8, 8),
				frandom(-2.5, 2.5), frandom(-2.5, 2.5), frandom(1.0, 2.0),
				frandom(0, 360), BLOOD_FLAGS, chanceMod);
		}
		TNT1 AA 0
		{
			A_SpawnItemEx("NashGoreBloodFloorSplashSpawner",
				0, 0, 0,
				frandom(-4.0, 4.0), frandom(-4.0, 4.0), frandom(1.0, 4.0),
				frandom(0, 360), BLOOD_FLAGS, chanceMod);
		}
		Stop;
	}

	void SpawnMainPuffSecondary()
	{
		FSpawnParticleParams PUFSPRK;

		if(target)
			CopyBloodColor(target);
		if(bloodcolor == 0)
			PUFSPRK.Color1 = "680000";
		else
		{
			Color bcbuffer;
			bcbuffer = Color(bloodcolor.r / 2, bloodcolor.g / 2, bloodcolor.r / 2);
			PUFSPRK.Color1 = bcbuffer;
		}
		PUFSPRK.Texture = TexMan.CheckForTexture("X103"..String.Format("%c", 97 + random[jtbs](0, 25)).."0");
		
		PUFSPRK.Style = STYLE_TRANSLUCENT;
		PUFSPRK.Flags = SPF_ROLL | SPF_REPLACE;
		
		PUFSPRK.Startroll = random[jtbs](0, 359);
		PUFSPRK.RollVel = frandom[jtbs](-2, 2);
		PUFSPRK.StartAlpha = frandom(0.2, 0.45);
		PUFSPRK.Size = random[jtbs](26, 100);
		PUFSPRK.SizeStep = 2;
		PUFSPRK.Lifetime = random[jtbs](250, 450); 
		PUFSPRK.RollAcc = -PUFSPRK.RollVel / double(PUFSPRK.Lifetime);

		vector3 vls = (frandom(-30, 30), frandom(-30, 30), frandom(-30, 30));
		
		PUFSPRK.Vel = vls.Unit() * 0.2;
		
		//PUFSPRK.accel = (vls * (1.0 / double(PUFSPRK.Lifetime)));
		//if(CeilingPic == SkyFlatNum)
		//	PUFSPRK.accel += (-0.01, 0.02, 0.01);
			
		PUFSPRK.FadeStep = -1;
		PUFSPRK.Pos = pos + vls;
		Level.SpawnParticle(PUFSPRK);
	}
}

class NashGoreBlood_Green : NashGoreBlood
{
	Default {
		translation "168:191=112:127", "16:47=123:127";
	}
}

class NashGoreBlood_Blue : NashGoreBlood
{
	Default {
		translation "168:191=192:207","16:47=240:247";
	}
}
//===========================================================================
//
//
//
//===========================================================================


class NashGoreBloodParticle1 : NashGoreBloodBase
{
	Default
	{
		Scale 0.6;
		Gravity 0.9;
		+NOCLIP
		+CORPSE
		Speed 7;
		Radius 8;
		Height 1;
		+MISSILE;
		-NOGRAVITY;
		Decal "BrutalBloodSplat";
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	override void Tick(void)
	{
		Super.Tick();
		if (!bNoTimeFreeze && (isFrozen() || Level.isFrozen())) return;

		if (GetAge() == 10) A_SetRenderStyle(1, STYLE_Translucent);
		if (GetAge() > 10) Alpha *= 0.9;

		A_SetScale(Scale.X + 0.0075);

		if (GetAge() > 350)
		{
			Destroy();
			return;
		}

		if (waterlevel > 0 && waterlevel < 3)
		{
			SetZ(Pos.Z - Vel.Z);
			NashGoreLiquidBlood.SpawnLiquidBlood(self);
			Destroy();
			return;
		}
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	States
	{
	Spawn:
		TNT1 A 1 NoDelay {
			SpawnCeilingBlood();
			A_Jump(256, "Blood1", "Blood2", "Blood3", "Blood4", "Blood5", "Blood6");
		}
		Stop;
	Blood1:
		NBL1 A -1;
		Stop;
	Blood2:
		NBL1 B -1;
		Stop;
	Blood3:
		NBL1 C -1;
		Stop;
	Blood4:
		NBL1 D -1;
		Stop;
	Blood5:
		NBL1 E -1;
		Stop;
	Blood6:
		NBL1 F -1;
		Stop;
	Crash:
		TNT1 A 1 A_SpawnItemEx("PB_BloodSpot", flags: (BLOOD_FLAGS | SXF_TRANSFERPOINTERS) & ~SXF_NOCHECKPOSITION);
		Stop;
	}
}

class NashGoreBloodParticle2 : NashGoreBloodBase
{
	Default
	{
		Radius 1;
		Height 2;
		Gravity 0.4;
		Scale 0.4;
		+NOCLIP
		+NOBLOCKMAP
		+CORPSE
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	States
	{
	/*
	Spawn:
		NBL2 ABCD 4;
		Stop;
		*/
		
	Spawn:
		TNT1 A 1 NoDelay {
			SpawnCeilingBlood();
			A_Jump(256, "Blood1", "Blood2", "Blood3", "Blood4", "Blood5", "Blood6");
		}
	Spawn1:
		X057 ABCDEFGHIJKLMNOPQRS 1;
		Stop;
	Spawn2:
		X058 ABCDEFGHIJKLMNOPQR 1;
		Stop;
	Spawn3:
		X059 ABCDEFGHIJKLM 1;
		Stop;
	Crash:
		TNT1 A 1 A_SpawnItemEx("PB_BloodSpot", flags: (BLOOD_FLAGS | SXF_TRANSFERPOINTERS) & ~SXF_NOCHECKPOSITION, failchance: 255 - nashgore_bloodamount);
		Stop;
	}
}


class NashGoreBloodParticle_Large : NashGoreBloodBase
{
	Default
	{
		Radius 1;
		Height 2;
		Gravity 0.24;
		Scale 0.65;
		+NOCLIP
		+NOBLOCKMAP
		+CORPSE
		Speed 2;
		+MISSILE;
		-NOGRAVITY;
		Decal "BrutalBloodSmear";
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	States
	{
	/*
	Spawn:
		NBL2 ABCD 4;
		Stop;
		*/
		
	Spawn:
		TNT1 A 1 NoDelay {
			SpawnCeilingBlood();
			A_Jump(256, "Blood1", "Blood2", "Blood3", "Blood4", "Blood5", "Blood6");
		}
	Spawn1:
		X057 ABCDEFGHIJKLMNOPQRS 1;
		Stop;
	Spawn2:
		X058 ABCDEFGHIJKLMNOPQR 1;
		Stop;
	Spawn3:
		X059 ABCDEFGHIJKLM 1;
		Stop;
	Crash:
		TNT1 A 1 A_SpawnItemEx("PB_BloodSpot", flags: (BLOOD_FLAGS | SXF_TRANSFERPOINTERS) & ~SXF_NOCHECKPOSITION, failchance: 255 - nashgore_bloodamount);
		Stop;
	}
}

//===========================================================================
//
//
//
//===========================================================================

class NashGoreClassicBlood : NashGoreBloodBase
{
	Default
	{
		-RANDOMIZE
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	States
	{
	Spawn:
		TNT1 A 0 NoDelay
		{
			A_SpawnItemEx("NashGoreBloodImpact", flags: BLOOD_FLAGS);

			// This shit needs to be in the Spawn state for translations to work correctly. >8[
			A_SpawnItemEx("NashGoreClassicBloodTrailSpawner",
				xvel: frandom(-6, 6), frandom(-6, 6), frandom(0, 8),
				frandom(0.0, 360.0), SXF_TRANSFERTRANSLATION, 110);
		}
		Stop;
	}
}

class NashGoreClassicBloodTrailSpawner : NashGoreBloodBase
{
	Default
	{
		Radius 8;
		Height 2;
		Gravity 0.235;
		+NOFRICTION
		+NOCLIP
		+CORPSE
	}

	const DECELERATION_SPEED = 0.963;

	//===========================================================================
	//
	//
	//
	//===========================================================================

	override void Tick(void)
	{
		Super.Tick();
		if (!bNoTimeFreeze && (isFrozen() || Level.isFrozen())) return;

		Vel.XY *= DECELERATION_SPEED;

		if (waterlevel >= 3)
		{
			A_FadeOut(0.07);
		}
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	States
	{
	Spawn:
		TNT1 A 3
		{
			A_SpawnItemEx("NashGoreClassicBloodTrail", flags: SXF_TRANSFERTRANSLATION);
		}
		Loop;
	Crash:
		TNT1 A 0
		{
			A_StartSound("nashgore/bloodsplash");
			A_SpawnItemEx("NashGoreBloodSpotClassic", flags: (BLOOD_FLAGS | SXF_TRANSFERPOINTERS) & ~SXF_NOCHECKPOSITION, failchance: 245);
		}
		Stop;
	}
}

class NashGoreClassicBloodTrail : NashGoreBloodBase
{
	Default
	{
		Radius 1;
		Height 1;
		Gravity 0.235;
		Scale 0.67;
		+CORPSE
	}
	//===========================================================================
	//
	//
	//
	//===========================================================================

	override void Tick(void)
	{
		Super.Tick();
		if (!bNoTimeFreeze && (isFrozen() || Level.isFrozen())) return;

		if (waterlevel > 0)
		{
			A_FadeOut(0.01);
			Vel.Z = -1;
		}
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	States
	{
	Spawn:
		NTRL ABCD 4;
		Loop;
	Crash:
		TNT1 AAAAA 1
		{
			A_SpawnItemEx("NashGoreBloodFloorSplash",
				frandom(-32, 32), frandom(-32, 32),
				flags: SXF_TRANSFERTRANSLATION | SXF_ABSOLUTEPOSITION | SXF_NOCHECKPOSITION, 220);

			A_SpawnItemEx("PB_BloodSpotTiny",
				frandom(-32, 32), frandom(-32, 32),
				flags: (BLOOD_FLAGS | SXF_TRANSFERPOINTERS) & ~SXF_NOCHECKPOSITION, 240);
		}
		Stop;
	}
}

//===========================================================================
//
//
//
//===========================================================================

class NashGoreBloodSpurtSpawner : Actor
{
	Default
	{
		FloatBobPhase 0;
		+DONTSPLASH
		+NOTELEPORT
		+NOBLOCKMONST
		+NOBLOCKMAP
		+MOVEWITHSECTOR
		-SOLID
	}

	uint8 spurtInterval;
	uint8 spurtDuration;

	//===========================================================================
	//
	//
	//
	//===========================================================================

	override void Tick(void)
	{
		Super.Tick();
		if (!bNoTimeFreeze && (isFrozen() || Level.isFrozen())) return;

		if (spurtInterval == 0)
		{
			spurtInterval = random(10, 75);
			spurtDuration = random(5, 20);
		}
		else if (spurtInterval > 0)
		{
			spurtInterval--;
		}

		if (spurtDuration > 0)
		{
			A_SpawnItemEx("NashGoreBloodSpurt",
				frandom(-5, 5), frandom(-5, 5), frandom(15, 25),
				frandom(-2, 2), frandom(-2, 2), frandom(4, 8),
				frandom(0, 360),
				NashGoreBloodBase.BLOOD_FLAGS);

			spurtDuration--;
		}

		if (GetAge() >= 35 * 5)
		{
			Destroy();
			return;
		}
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	States
	{
	Spawn:
		TNT1 A -1;
		Stop;
	}
}

class NashGoreBloodSpurt : NashGoreBloodBase
{
	Default
	{
		Gravity 0.4326;
		+CORPSE
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	override void BeginPlay(void)
	{
		Super.BeginPlay();

		Gravity *= frandom(1.0, 1.5);
	}

	override void Tick(void)
	{
		Super.Tick();
		if (!bNoTimeFreeze && (isFrozen() || Level.isFrozen())) return;

		if (waterlevel > 1)
		{
			NashGoreLiquidBlood.SpawnLiquidBlood(self);
			Destroy();
			return;
		}
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	States
	{
	Spawn:
		NBL2 ABCD 5;
		Loop;
	Crash:
		TNT1 A 1
		{
			A_SpawnItemEx("PB_BloodSpot", flags: (BLOOD_FLAGS | SXF_TRANSFERPOINTERS) & ~SXF_NOCHECKPOSITION, failchance: 245);
			A_SpawnItemEx("NashGoreBloodFloorSplash",
				frandom(-32, 32), frandom(-32, 32),
				flags: SXF_TRANSFERTRANSLATION | SXF_ABSOLUTEPOSITION | SXF_NOCHECKPOSITION);
		}
		Stop;
	}
}

//===========================================================================
//
//
//
//===========================================================================

class NashGoreBloodFloorSplashSpawner : Actor
{
	Default
	{
		Radius 1;
		Height 1;
		Gravity 0.5;
		FloatBobPhase 0;
		+CORPSE
		+DONTSPLASH
		+NOTELEPORT
		+NOBLOCKMONST
		+NOBLOCKMAP
		-SOLID
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	States
	{
	Spawn:
		TNT1 A -1;
		Stop;
	Crash:
		TNT1 A 0 A_SpawnItemEx("NashGoreBloodFloorSplash", flags: NashGoreBloodBase.BLOOD_FLAGS);
		Stop;
	}
}

class NashGoreBloodFloorSplash : NashGoreBloodBase
{
	Default
	{
		Radius 1;
		Height 2;
		Scale 0.5;
		-NOBLOCKMAP
		-RANDOMIZE
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	override void Tick(void)
	{
		Super.Tick();
		if (!bNoTimeFreeze && (isFrozen() || Level.isFrozen())) return;

		if (waterlevel > 1)
		{
			Destroy();
			return;
		}
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	States
	{
	Spawn:
		BDRP BCDEF 2;
		Stop;
	}
}

//===========================================================================
//
//
//
//===========================================================================

class NashGoreBloodDrop : NashGoreBloodBase
{
	Default
	{
		Scale 0.35;
		+FORCEYBILLBOARD
		+CORPSE
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	States
	{
	Spawn:
		BDRP A -1;
		Stop;
	Crash:
		TNT1 A 0
		{
			A_SpawnItemEx("NashGoreBloodFloorSplash", flags: BLOOD_FLAGS);
			A_SpawnItemEx("PB_BloodSpotTiny", flags: (BLOOD_FLAGS | SXF_TRANSFERPOINTERS) & ~SXF_NOCHECKPOSITION);
			if (random() < 180) A_StartSound("nashgore/blooddrop");
		}
		Stop;
	}
}
